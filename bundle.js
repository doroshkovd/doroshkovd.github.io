!function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(r,i,function(t){return e[t]}.bind(null,i));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=1)}([function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.CONFIG={api:"http://my-json-server.typicode.com/doroshkovd/FE2-2019-2020",selectors:{mainContentPages:".main-content .page",homePage:".all-products",productsListItems:".all-products .products-list > li",productsList:".all-products .products-list",productTemplate:"#products-template",singlePage:".single-product",singlePageContent:".preview-large",errorPage:".error",loginPage:".login",checkbox:".all-products input[type=checkbox]"},hidden:"hidden",visible:"visible",filterOptions:["manufacturer","storage","os","camera"]}},function(e,t,n){"use strict";var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(0),o=n(2),s=(n(3),n(4)),u=n(6),c=n(7);new(function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.products=[],this.router=new u.RouterHistory,this.authServise=new c.AuthService(this.router),this.checkboxService=new s.CheckboxService,this.pageRender=new o.PageRender(this.checkboxService,this.router),this.checkboxService.subscribe(this.onFilterChange.bind(this)),this.init()}return r(e,[{key:"init",value:function(){var e=this;fetch(i.CONFIG.api+"/products",{headers:{"Content-Type":"application/json"}}).then((function(e){return e.json()})).then((function(t){e.products=t,e.pageRender.generateAllProducts(t),e.pageRender.initSingleProductPage(),e.pageRender.initResetCheckbox(),e.initRouter(),e.router.render(decodeURI(location.pathname))}))}},{key:"initRouter",value:function(){this.router.addRoute("",this.pageRender.renderHomePage.bind(this.pageRender,this.products)),this.router.addRoute("products",this.pageRender.renderSingleProductPage.bind(this.pageRender,this.products)),this.router.addRoute("404",this.pageRender.renderErrorPage),this.router.addRoute("login",this.pageRender.renderLoginPage),this.router.addRoute("filter",this.pageRender.renderFilterResult.bind(this.pageRender,this.products,this.checkboxService.filters))}},{key:"onFilterChange",value:function(e){history.pushState(null,null,e),this.router.render(decodeURI(location.pathname))}}]),e}())},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.PageRender=void 0;var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(0);function o(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}t.PageRender=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.checkboxService=t,this.router=n}return r(e,[{key:"renderHomePage",value:function(e){var t=document.querySelector(i.CONFIG.selectors.homePage),n=document.querySelectorAll(i.CONFIG.selectors.productsListItems);[].concat(o(n)).forEach((function(e){e.classList.add(i.CONFIG.hidden)})),[].concat(o(n)).forEach((function(t){e.forEach((function(e){Number(t.dataset.index)===Number(e.id)&&t.classList.remove(i.CONFIG.hidden)}))})),t.classList.add(i.CONFIG.visible)}},{key:"generateAllProducts",value:function(e){var t=this,n=document.querySelector(i.CONFIG.selectors.productsList),r=document.querySelector(i.CONFIG.selectors.productTemplate).innerHTML,o=Handlebars.compile(r);n.innerHTML=o(e),n.querySelectorAll("li").forEach((function(e){e.addEventListener("click",(function(n){n.preventDefault();var r=e.dataset.index;window.history.pushState(null,null,"/products/"+r),t.router.render(decodeURI(location.pathname))}))}))}},{key:"initSingleProductPage",value:function(){var e=this;this.singleProductPage=document.querySelector(i.CONFIG.selectors.singlePage),this.singleProductPage.addEventListener("click",(function(t){if(t.preventDefault(),e.singleProductPage.classList.contains(i.CONFIG.visible)){var n=t.target;(n.classList.contains("close")||n.classList.contains("overlay"))&&(history.pushState(null,null,e.checkboxService.getCurrentState()),e.router.render(decodeURI(location.pathname)))}}))}},{key:"render404",value:function(){history.pushState(null,null,"/404"),this.router.render(decodeURI(location.pathname))}},{key:"renderLogin",value:function(){history.pushState(null,null,"/login"),this.router.render(decodeURI(location.pathname))}},{key:"renderSingleProductPage",value:function(e){var t=document.querySelector(i.CONFIG.selectors.singlePage),n=document.querySelector(i.CONFIG.selectors.singlePageContent),r=location.pathname.split("/products/")[1].trim();console.log(r);var o=!1;e.length&&e.forEach((function(e){Number(e.id)===Number(r)&&(o=!0,n.querySelector("h3").innerText=e.name,n.querySelector("img").setAttribute("src","/"+e.image.large),n.querySelector("p").innerText=e.description)})),console.log(this),o?t.classList.add(i.CONFIG.visible):this.render404()}},{key:"renderErrorPage",value:function(){document.querySelector(i.CONFIG.selectors.errorPage).classList.add(i.CONFIG.visible)}},{key:"renderLoginPage",value:function(){var e=document.querySelector(i.CONFIG.selectors.loginPage);document.getElementById("registration").addEventListener("click",(function(e){e.preventDefault(),e.target.classList.contains("open")?(document.getElementById("registration-area").style.display="none",e.target.classList.toggle("open")):(document.getElementById("registration-area").style.display="block",e.target.classList.toggle("open"))})),e.classList.add(i.CONFIG.visible)}},{key:"filterResult",value:function(e,t){console.log(t);var n=i.CONFIG.filterOptions,r=[].concat(o(e)),s=[],u=!1;return this.clearCheckbox(),n.forEach((function(e){t[e]&&t[e].length&&(u&&(r=s,s=[]),console.log(e),t[e].forEach((function(t){r.forEach((function(n){"number"==typeof n.specs[e]&&n.specs[e]===Number(t)&&(s.push(n),u=!0),"string"==typeof n.specs[e]&&-1!==n.specs[e].toLowerCase().indexOf(t)&&(s.push(n),u=!0)})),[].concat(o(document.querySelectorAll("input[name="+e+"]"))).filter((function(e){return e.value===t}))[0].checked=!0})))})),s}},{key:"renderFilterResult",value:function(e,t){var n=this.filterResult(e,t);this.renderHomePage(n)}},{key:"clearCheckbox",value:function(){[].concat(o(document.querySelectorAll(i.CONFIG.selectors.checkbox))).forEach((function(e){e.checked=!1}))}},{key:"initResetCheckbox",value:function(){var e=this;document.querySelector(".filters button").addEventListener("click",(function(t){t.preventDefault(),e.clearCheckbox()}))}}]),e}()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Router=void 0;var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(0);t.Router=function(){function e(){var t=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.routes={404:function(){console.log("Not found")}},this.mainContentPages=document.querySelectorAll(i.CONFIG.selectors.mainContentPages),console.log("constructor",this.mainContentPages),window.addEventListener("hashchange",(function(){console.log(window.location.hash),t.render(decodeURI(window.location.hash))}))}return r(e,[{key:"addRoute",value:function(e,t){this.routes[e]=t}},{key:"render",value:function(e){var t=e.split("/")[0];[].concat(function(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}(this.mainContentPages)).forEach((function(e){e.classList.remove(i.CONFIG.visible)})),this.routes[t]?this.routes[t]():this.routes[404]()}}]),e}()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.CheckboxService=void 0;var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(0),o=n(5);t.CheckboxService=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._checkbox=document.querySelectorAll(i.CONFIG.selectors.checkbox),this._observable=new o.Observable,this.filters={},this.initialState(),this.init()}return r(e,[{key:"subscribe",value:function(e){this._observable.subscribe(e)}},{key:"init",value:function(){var e=this;this._checkbox.forEach((function(t){t.addEventListener("click",e.onCheckboxClick.bind(e))})),document.querySelector(".filters button").addEventListener("click",(function(t){t.preventDefault(),e.filters={},e._observable.next("/")}))}},{key:"onCheckboxClick",value:function(e){var t=e.target,n=t.getAttribute("name");if(t.checked)this.filters[n]&&this.filters[n].length||(this.filters[n]=[]),this.filters[n].push(t.value);else{if(this.filters[n]&&this.filters[n].length&&this.filters[n].includes(t.value)){var r=this.filters[n].indexOf(t.value);this.filters[n].splice(r,1)}this.filters[n].length||delete this.filters[n]}this._observable.next(this.createQueryHash())}},{key:"initialState",value:function(){if(location.pathname.includes("filter/")){var e=location.pathname.split("/filter/")[1].trim();try{this.filters=JSON.parse(decodeURI(e))}catch(e){this.filters={}}}}},{key:"createQueryHash",value:function(){return Object.keys(this.filters).length>0?"/filter/"+JSON.stringify(this.filters):"/"}},{key:"getCurrentState",value:function(){return this.createQueryHash()}}]),e}()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();t.Observable=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.subscribers=[]}return r(e,[{key:"subscribe",value:function(e){this.subscribers.push(e)}},{key:"next",value:function(e){this.subscribers.forEach((function(t){t(e)}))}}]),e}()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.RouterHistory=void 0;var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(0);t.RouterHistory=function(){function e(){var t=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.routes={404:function(){console.log("Not found")}},this.mainContentPages=document.querySelectorAll(i.CONFIG.selectors.mainContentPages),window.addEventListener("popstate",(function(){t.render(decodeURI(window.location.pathname))}))}return r(e,[{key:"addRoute",value:function(e,t){this.routes[e]=t}},{key:"isAuth",value:function(){return sessionStorage.getItem("login")}},{key:"render",value:function(e){if(this.isAuth()){console.log(e);var t=e.split("/")[1];[].concat(function(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}(this.mainContentPages)).forEach((function(e){e.classList.remove(i.CONFIG.visible)})),"login"===t&&(t="",history.pushState(null,null,"/")),this.routes[t]?this.routes[t]():this.routes[404]()}else history.pushState(null,null,"/login"),this.routes.login()}}]),e}()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.AuthService=void 0;var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(0);t.AuthService=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.btn=document.getElementById("login-btn"),this.init(),this.router=t}return r(e,[{key:"init",value:function(){var e=this;this.btn.addEventListener("click",(function(t){t.preventDefault(),e.auth()}))}},{key:"auth",value:function(){var e=this,t=document.getElementById("login-name").value,n=document.getElementById("login-psw").value;t.trim()&&n.trim()&&fetch(i.CONFIG.api+"/users").then((function(e){return e.json()})).then((function(r){1===(r=r.filter((function(e){return e.login===t&&String(e.psw)===n}))).length&&(sessionStorage.setItem("login",!0),history.pushState(null,null,"/"),e.router.render(decodeURI(location.pathname)))}))}}]),e}()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbmZpZy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYXBwLmpzIiwid2VicGFjazovLy8uL3NyYy9wYWdlLXJlbmRlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcm91dGVyLmpzIiwid2VicGFjazovLy8uL3NyYy9jaGVja2JveC1zZXJ2aWNlLmpzIiwid2VicGFjazovLy8uL3NyYy9vYnNlcnZhYmxlLmpzIiwid2VicGFjazovLy8uL3NyYy9yb3V0ZXJIaXN0b3J5LmpzIiwid2VicGFjazovLy8uL3NyYy9hdXRoLnNlcnZpY2UuanMiXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJDT05GSUciLCJhcGkiLCJzZWxlY3RvcnMiLCJtYWluQ29udGVudFBhZ2VzIiwiaG9tZVBhZ2UiLCJwcm9kdWN0c0xpc3RJdGVtcyIsInByb2R1Y3RzTGlzdCIsInByb2R1Y3RUZW1wbGF0ZSIsInNpbmdsZVBhZ2UiLCJzaW5nbGVQYWdlQ29udGVudCIsImVycm9yUGFnZSIsImxvZ2luUGFnZSIsImNoZWNrYm94IiwiaGlkZGVuIiwidmlzaWJsZSIsImZpbHRlck9wdGlvbnMiLCJ0aGlzIiwicHJvZHVjdHMiLCJyb3V0ZXIiLCJSb3V0ZXJIaXN0b3J5IiwiYXV0aFNlcnZpc2UiLCJBdXRoU2VydmljZSIsImNoZWNrYm94U2VydmljZSIsIkNoZWNrYm94U2VydmljZSIsInBhZ2VSZW5kZXIiLCJQYWdlUmVuZGVyIiwic3Vic2NyaWJlIiwib25GaWx0ZXJDaGFuZ2UiLCJpbml0IiwiZmV0Y2giLCJoZWFkZXJzIiwidGhlbiIsInJlcyIsImpzb24iLCJkYXRhIiwiZ2VuZXJhdGVBbGxQcm9kdWN0cyIsImluaXRTaW5nbGVQcm9kdWN0UGFnZSIsImluaXRSZXNldENoZWNrYm94IiwiaW5pdFJvdXRlciIsInJlbmRlciIsImRlY29kZVVSSSIsImxvY2F0aW9uIiwicGF0aG5hbWUiLCJhZGRSb3V0ZSIsInJlbmRlckhvbWVQYWdlIiwicmVuZGVyU2luZ2xlUHJvZHVjdFBhZ2UiLCJyZW5kZXJFcnJvclBhZ2UiLCJyZW5kZXJMb2dpblBhZ2UiLCJyZW5kZXJGaWx0ZXJSZXN1bHQiLCJmaWx0ZXJzIiwiaGlzdG9yeSIsInB1c2hTdGF0ZSIsInBhZ2UiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJhbGxQcm9kdWN0cyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJmb3JFYWNoIiwicHJvZHVjdCIsImNsYXNzTGlzdCIsImFkZCIsIml0ZW0iLCJOdW1iZXIiLCJkYXRhc2V0IiwiaW5kZXgiLCJpZCIsInJlbW92ZSIsImxpc3QiLCJ0ZW1wbGF0ZVNjcmlwdCIsImlubmVySFRNTCIsInRlbXBsYXRlIiwiSGFuZGxlYmFycyIsImNvbXBpbGUiLCJsaSIsImFkZEV2ZW50TGlzdGVuZXIiLCJldmVudCIsInByZXZlbnREZWZhdWx0Iiwid2luZG93Iiwic2luZ2xlUHJvZHVjdFBhZ2UiLCJjb250YWlucyIsImNsaWNrZWQiLCJ0YXJnZXQiLCJnZXRDdXJyZW50U3RhdGUiLCJjb250YWluZXIiLCJzcGxpdCIsInRyaW0iLCJjb25zb2xlIiwibG9nIiwiaXNGaW5kIiwibGVuZ3RoIiwiaW5uZXJUZXh0Iiwic2V0QXR0cmlidXRlIiwiaW1hZ2UiLCJsYXJnZSIsImRlc2NyaXB0aW9uIiwicmVuZGVyNDA0IiwiZ2V0RWxlbWVudEJ5SWQiLCJzdHlsZSIsImRpc3BsYXkiLCJ0b2dnbGUiLCJmaWx0ZXIiLCJvcHRpb25zIiwicHJvZHVjdHNDb3B5IiwicmVzdWx0IiwiaXNGaWx0ZXJlZCIsImNsZWFyQ2hlY2tib3giLCJvcHRpb24iLCJzcGVjcyIsInB1c2giLCJ0b0xvd2VyQ2FzZSIsImluZGV4T2YiLCJjaGVja2VkIiwiZmlsdGVyUmVzdWx0IiwiUm91dGVyIiwicm91dGVzIiwiaGFzaCIsInJvdXRlIiwiYWN0aW9uIiwidXJsIiwidGVtcCIsIl9jaGVja2JveCIsIl9vYnNlcnZhYmxlIiwiT2JzZXJ2YWJsZSIsImluaXRpYWxTdGF0ZSIsImZuIiwib25DaGVja2JveENsaWNrIiwibmV4dCIsInNwZWNOYW1lIiwiZ2V0QXR0cmlidXRlIiwiaW5jbHVkZXMiLCJzcGxpY2UiLCJjcmVhdGVRdWVyeUhhc2giLCJKU09OIiwicGFyc2UiLCJlIiwia2V5cyIsInN0cmluZ2lmeSIsInN1YnNjcmliZXJzIiwic2IiLCJzZXNzaW9uU3RvcmFnZSIsImdldEl0ZW0iLCJpc0F1dGgiLCJidG4iLCJhdXRoIiwidXNlck5hbWUiLCJ1c2VyUHN3IiwibG9naW4iLCJTdHJpbmciLCJwc3ciLCJzZXRJdGVtIl0sIm1hcHBpbmdzIjoiYUFDRSxJQUFJQSxFQUFtQixHQUd2QixTQUFTQyxFQUFvQkMsR0FHNUIsR0FBR0YsRUFBaUJFLEdBQ25CLE9BQU9GLEVBQWlCRSxHQUFVQyxRQUduQyxJQUFJQyxFQUFTSixFQUFpQkUsR0FBWSxDQUN6Q0csRUFBR0gsRUFDSEksR0FBRyxFQUNISCxRQUFTLElBVVYsT0FOQUksRUFBUUwsR0FBVU0sS0FBS0osRUFBT0QsUUFBU0MsRUFBUUEsRUFBT0QsUUFBU0YsR0FHL0RHLEVBQU9FLEdBQUksRUFHSkYsRUFBT0QsUUFLZkYsRUFBb0JRLEVBQUlGLEVBR3hCTixFQUFvQlMsRUFBSVYsRUFHeEJDLEVBQW9CVSxFQUFJLFNBQVNSLEVBQVNTLEVBQU1DLEdBQzNDWixF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QixVQUFUeUcsSUFDRkEsRUFBTyxHQUNQckUsUUFBUUMsVUFBVSxLQUFNLEtBQU0sTUFFaENuQyxLQUFLa0csT0FBT0ssR0FBUXZHLEtBQUtrRyxPQUFPSyxLQUFVdkcsS0FBS2tHLE9BQU8sWUFFdERoRSxRQUFRQyxVQUFVLEtBQU0sS0FBTSxVQUM5Qm5DLEtBQUtrRyxPQUFMLFksa1dDN0NOLE8sRUFFYTdGLFksV0FDWCxXQUFZSCxJLDRGQUFRLFNBQ2xCRixLQUFLOEgsSUFBTXpGLFNBQVMyQyxlQUFlLGFBQ25DaEYsS0FBS1ksT0FDTFosS0FBS0UsT0FBU0EsRSx5Q0FHVCxXQUNMRixLQUFLOEgsSUFBSXBFLGlCQUFpQixTQUFTLFNBQUNDLEdBQ2xDQSxFQUFNQyxpQkFDTixFQUFLbUUsWSw2QkFJRixXQUNDQyxFQUFXM0YsU0FBUzJDLGVBQWUsY0FBYy9HLE1BQ2pEZ0ssRUFBVTVGLFNBQVMyQyxlQUFlLGFBQWEvRyxNQUVqRCtKLEVBQVMzRCxRQUFVNEQsRUFBUTVELFFBQzdCeEQsTUFBUzdCLFNBQU9DLElBQWhCLFVBQ0c4QixNQUFLLFNBQUNDLEdBQUQsT0FBU0EsRUFBSUMsVUFDbEJGLE1BQUssU0FBQ0MsR0FHYSxLQUZsQkEsRUFBTUEsRUFBSW9FLFFBQU8sU0FBQ3ZDLEdBQUQsT0FBVUEsRUFBS3FGLFFBQVVGLEdBQVlHLE9BQU90RixFQUFLdUYsT0FBU0gsTUFFcEV4RCxTQUNMa0QsZUFBZVUsUUFBUSxTQUFTLEdBQ2hDbkcsUUFBUUMsVUFBVSxLQUFNLEtBQU0sS0FDOUIsRUFBS2pDLE9BQU9xQixPQUFPQyxVQUFVQyxTQUFTQyxtQiIsImZpbGUiOiJidW5kbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMSk7XG4iLCJleHBvcnQgY29uc3QgQ09ORklHID0ge1xyXG4gIGFwaTogJ2h0dHA6Ly9teS1qc29uLXNlcnZlci50eXBpY29kZS5jb20vZG9yb3Noa292ZC9GRTItMjAxOS0yMDIwJyxcclxuICBzZWxlY3RvcnM6IHtcclxuICAgIG1haW5Db250ZW50UGFnZXM6ICcubWFpbi1jb250ZW50IC5wYWdlJyxcclxuICAgIGhvbWVQYWdlOiAnLmFsbC1wcm9kdWN0cycsXHJcbiAgICBwcm9kdWN0c0xpc3RJdGVtczogJy5hbGwtcHJvZHVjdHMgLnByb2R1Y3RzLWxpc3QgPiBsaScsXHJcbiAgICBwcm9kdWN0c0xpc3Q6ICcuYWxsLXByb2R1Y3RzIC5wcm9kdWN0cy1saXN0JyxcclxuICAgIHByb2R1Y3RUZW1wbGF0ZTogJyNwcm9kdWN0cy10ZW1wbGF0ZScsXHJcbiAgICBzaW5nbGVQYWdlOiAnLnNpbmdsZS1wcm9kdWN0JyxcclxuICAgIHNpbmdsZVBhZ2VDb250ZW50OiAnLnByZXZpZXctbGFyZ2UnLFxyXG4gICAgZXJyb3JQYWdlOiAnLmVycm9yJyxcclxuICAgIGxvZ2luUGFnZTogJy5sb2dpbicsXHJcbiAgICBjaGVja2JveDogJy5hbGwtcHJvZHVjdHMgaW5wdXRbdHlwZT1jaGVja2JveF0nLFxyXG4gIH0sXHJcbiAgaGlkZGVuOiAnaGlkZGVuJyxcclxuICB2aXNpYmxlOiAndmlzaWJsZScsXHJcbiAgZmlsdGVyT3B0aW9uczogWydtYW51ZmFjdHVyZXInLCAnc3RvcmFnZScsICdvcycsICdjYW1lcmEnXSxcclxufTtcclxuIiwiaW1wb3J0IHsgQ09ORklHIH0gZnJvbSBcIi4vY29uZmlnXCI7XHJcbmltcG9ydCB7IFBhZ2VSZW5kZXIgfSBmcm9tIFwiLi9wYWdlLXJlbmRlclwiO1xyXG5pbXBvcnQgeyBSb3V0ZXIgfSBmcm9tIFwiLi9yb3V0ZXJcIjtcclxuaW1wb3J0IHsgQ2hlY2tib3hTZXJ2aWNlIH0gZnJvbSBcIi4vY2hlY2tib3gtc2VydmljZVwiO1xyXG5pbXBvcnQgeyBSb3V0ZXJIaXN0b3J5IH0gZnJvbSBcIi4vcm91dGVySGlzdG9yeVwiO1xyXG5pbXBvcnQgeyBBdXRoU2VydmljZSB9IGZyb20gXCIuL2F1dGguc2VydmljZVwiO1xyXG5cclxuY2xhc3MgQXBwIHtcclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHRoaXMucHJvZHVjdHMgPSBbXTtcclxuICAgIC8vIHRoaXMucm91dGVyID0gbmV3IFJvdXRlcigpO1xyXG4gICAgdGhpcy5yb3V0ZXIgPSBuZXcgUm91dGVySGlzdG9yeSgpO1xyXG4gICAgdGhpcy5hdXRoU2VydmlzZSA9IG5ldyBBdXRoU2VydmljZSh0aGlzLnJvdXRlcik7XHJcbiAgICB0aGlzLmNoZWNrYm94U2VydmljZSA9IG5ldyBDaGVja2JveFNlcnZpY2UoKTtcclxuICAgIHRoaXMucGFnZVJlbmRlciA9IG5ldyBQYWdlUmVuZGVyKHRoaXMuY2hlY2tib3hTZXJ2aWNlLCB0aGlzLnJvdXRlcik7XHJcbiAgICB0aGlzLmNoZWNrYm94U2VydmljZS5zdWJzY3JpYmUodGhpcy5vbkZpbHRlckNoYW5nZS5iaW5kKHRoaXMpKTtcclxuICAgIHRoaXMuaW5pdCgpO1xyXG4gIH1cclxuXHJcbiAgaW5pdCgpIHtcclxuICAgIGZldGNoKGAke0NPTkZJRy5hcGl9L3Byb2R1Y3RzYCwge1xyXG4gICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcclxuICAgICAgfVxyXG4gICAgfSlcclxuICAgICAgLnRoZW4oKHJlcykgPT4gcmVzLmpzb24oKSlcclxuICAgICAgLnRoZW4oKGRhdGEpID0+IHtcclxuICAgICAgICB0aGlzLnByb2R1Y3RzID0gZGF0YTtcclxuICAgICAgICB0aGlzLnBhZ2VSZW5kZXIuZ2VuZXJhdGVBbGxQcm9kdWN0cyhkYXRhKTtcclxuICAgICAgICB0aGlzLnBhZ2VSZW5kZXIuaW5pdFNpbmdsZVByb2R1Y3RQYWdlKCk7XHJcbiAgICAgICAgdGhpcy5wYWdlUmVuZGVyLmluaXRSZXNldENoZWNrYm94KCk7XHJcbiAgICAgICAgdGhpcy5pbml0Um91dGVyKCk7XHJcbiAgICAgICAgLy8gd2luZG93LmRpc3BhdGNoRXZlbnQobmV3IEhhc2hDaGFuZ2VFdmVudCgnaGFzaGNoYW5nZScpKTtcclxuICAgICAgICB0aGlzLnJvdXRlci5yZW5kZXIoZGVjb2RlVVJJKGxvY2F0aW9uLnBhdGhuYW1lKSk7XHJcbiAgICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgaW5pdFJvdXRlcigpIHtcclxuICAgIHRoaXMucm91dGVyLmFkZFJvdXRlKCcnLCB0aGlzLnBhZ2VSZW5kZXIucmVuZGVySG9tZVBhZ2UuYmluZCh0aGlzLnBhZ2VSZW5kZXIsIHRoaXMucHJvZHVjdHMpKTtcclxuICAgIHRoaXMucm91dGVyLmFkZFJvdXRlKCdwcm9kdWN0cycsXHJcbiAgICAgIHRoaXMucGFnZVJlbmRlci5yZW5kZXJTaW5nbGVQcm9kdWN0UGFnZS5iaW5kKHRoaXMucGFnZVJlbmRlciwgdGhpcy5wcm9kdWN0cykpO1xyXG4gICAgdGhpcy5yb3V0ZXIuYWRkUm91dGUoJzQwNCcsIHRoaXMucGFnZVJlbmRlci5yZW5kZXJFcnJvclBhZ2UpO1xyXG4gICAgdGhpcy5yb3V0ZXIuYWRkUm91dGUoJ2xvZ2luJywgdGhpcy5wYWdlUmVuZGVyLnJlbmRlckxvZ2luUGFnZSk7XHJcbiAgICB0aGlzLnJvdXRlci5hZGRSb3V0ZSgnZmlsdGVyJywgdGhpcy5wYWdlUmVuZGVyLnJlbmRlckZpbHRlclJlc3VsdC5iaW5kKHRoaXMucGFnZVJlbmRlciwgdGhpcy5wcm9kdWN0cywgdGhpcy5jaGVja2JveFNlcnZpY2UuZmlsdGVycykpO1xyXG4gIH1cclxuXHJcbiAgb25GaWx0ZXJDaGFuZ2UoZGF0YSkge1xyXG4gICAgLy8gbG9jYXRpb24uaGFzaCA9IGRhdGE7XHJcbiAgICBoaXN0b3J5LnB1c2hTdGF0ZShudWxsLCBudWxsLCBkYXRhKTtcclxuICAgIHRoaXMucm91dGVyLnJlbmRlcihkZWNvZGVVUkkobG9jYXRpb24ucGF0aG5hbWUpKTtcclxuICB9XHJcbn1cclxuXHJcbmNvbnN0IGFwcCA9IG5ldyBBcHAoKTtcclxuIiwiaW1wb3J0IHsgQ09ORklHIH0gZnJvbSBcIi4vY29uZmlnXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgUGFnZVJlbmRlciB7XHJcbiAgY29uc3RydWN0b3IoY2hlY2tib3hTZXJ2aWNlLCByb3V0ZXIpIHtcclxuICAgIHRoaXMuY2hlY2tib3hTZXJ2aWNlID0gY2hlY2tib3hTZXJ2aWNlO1xyXG4gICAgdGhpcy5yb3V0ZXIgPSByb3V0ZXI7XHJcbiAgfVxyXG5cclxuICByZW5kZXJIb21lUGFnZShwcm9kdWN0cykge1xyXG4gICAgY29uc3QgcGFnZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoQ09ORklHLnNlbGVjdG9ycy5ob21lUGFnZSk7XHJcbiAgICBjb25zdCBhbGxQcm9kdWN0cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoQ09ORklHLnNlbGVjdG9ycy5wcm9kdWN0c0xpc3RJdGVtcyk7XHJcbiAgICBbLi4uYWxsUHJvZHVjdHNdLmZvckVhY2goKHByb2R1Y3QpID0+IHtcclxuICAgICAgcHJvZHVjdC5jbGFzc0xpc3QuYWRkKENPTkZJRy5oaWRkZW4pO1xyXG4gICAgfSk7XHJcblxyXG4gICAgWy4uLmFsbFByb2R1Y3RzXS5mb3JFYWNoKChwcm9kdWN0KSA9PiB7XHJcbiAgICAgIHByb2R1Y3RzLmZvckVhY2goKGl0ZW0pID0+IHtcclxuICAgICAgICBpZiAoTnVtYmVyKHByb2R1Y3QuZGF0YXNldC5pbmRleCkgPT09IE51bWJlcihpdGVtLmlkKSkge1xyXG4gICAgICAgICAgcHJvZHVjdC5jbGFzc0xpc3QucmVtb3ZlKENPTkZJRy5oaWRkZW4pO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBwYWdlLmNsYXNzTGlzdC5hZGQoQ09ORklHLnZpc2libGUpO1xyXG4gIH1cclxuXHJcbiAgZ2VuZXJhdGVBbGxQcm9kdWN0cyhkYXRhKSB7XHJcbiAgICBjb25zdCBsaXN0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihDT05GSUcuc2VsZWN0b3JzLnByb2R1Y3RzTGlzdCk7XHJcbiAgICBjb25zdCB0ZW1wbGF0ZVNjcmlwdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoQ09ORklHLnNlbGVjdG9ycy5wcm9kdWN0VGVtcGxhdGUpLmlubmVySFRNTDtcclxuXHJcbiAgICAvL2NvbXBpbGVcclxuICAgIGNvbnN0IHRlbXBsYXRlID0gSGFuZGxlYmFycy5jb21waWxlKHRlbXBsYXRlU2NyaXB0KTtcclxuICAgIGxpc3QuaW5uZXJIVE1MID0gdGVtcGxhdGUoZGF0YSk7XHJcblxyXG4gICAgbGlzdC5xdWVyeVNlbGVjdG9yQWxsKCdsaScpLmZvckVhY2goKGxpKSA9PiB7XHJcbiAgICAgIGxpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGV2ZW50KSA9PiB7XHJcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICBjb25zdCBpbmRleCA9IGxpLmRhdGFzZXQuaW5kZXg7XHJcbiAgICAgICAgd2luZG93Lmhpc3RvcnkucHVzaFN0YXRlKG51bGwsIG51bGwsIGAvcHJvZHVjdHMvJHtpbmRleH1gKTtcclxuICAgICAgICB0aGlzLnJvdXRlci5yZW5kZXIoZGVjb2RlVVJJKGxvY2F0aW9uLnBhdGhuYW1lKSk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBpbml0U2luZ2xlUHJvZHVjdFBhZ2UoKSB7XHJcbiAgICB0aGlzLnNpbmdsZVByb2R1Y3RQYWdlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihDT05GSUcuc2VsZWN0b3JzLnNpbmdsZVBhZ2UpO1xyXG4gICAgdGhpcy5zaW5nbGVQcm9kdWN0UGFnZS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChldmVudCkgPT4ge1xyXG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICBpZiAodGhpcy5zaW5nbGVQcm9kdWN0UGFnZS5jbGFzc0xpc3QuY29udGFpbnMoQ09ORklHLnZpc2libGUpKSB7XHJcbiAgICAgICAgY29uc3QgY2xpY2tlZCA9IGV2ZW50LnRhcmdldDtcclxuXHJcbiAgICAgICAgaWYgKGNsaWNrZWQuY2xhc3NMaXN0LmNvbnRhaW5zKCdjbG9zZScpIHx8XHJcbiAgICAgICAgY2xpY2tlZC5jbGFzc0xpc3QuY29udGFpbnMoJ292ZXJsYXknKSkge1xyXG4gICAgICAgICAgaGlzdG9yeS5wdXNoU3RhdGUobnVsbCwgbnVsbCwgdGhpcy5jaGVja2JveFNlcnZpY2UuZ2V0Q3VycmVudFN0YXRlKCkpO1xyXG4gICAgICAgICAgdGhpcy5yb3V0ZXIucmVuZGVyKGRlY29kZVVSSShsb2NhdGlvbi5wYXRobmFtZSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICByZW5kZXI0MDQoKSB7XHJcbiAgICBoaXN0b3J5LnB1c2hTdGF0ZShudWxsLCBudWxsLCAnLzQwNCcpO1xyXG4gICAgdGhpcy5yb3V0ZXIucmVuZGVyKGRlY29kZVVSSShsb2NhdGlvbi5wYXRobmFtZSkpO1xyXG4gIH1cclxuXHJcbiAgcmVuZGVyTG9naW4oKSB7XHJcbiAgICBoaXN0b3J5LnB1c2hTdGF0ZShudWxsLCBudWxsLCAnL2xvZ2luJyk7XHJcbiAgICB0aGlzLnJvdXRlci5yZW5kZXIoZGVjb2RlVVJJKGxvY2F0aW9uLnBhdGhuYW1lKSk7XHJcbiAgfVxyXG5cclxuICByZW5kZXJTaW5nbGVQcm9kdWN0UGFnZShwcm9kdWN0cykge1xyXG4gICAgY29uc3QgcGFnZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoQ09ORklHLnNlbGVjdG9ycy5zaW5nbGVQYWdlKTtcclxuICAgIGNvbnN0IGNvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoQ09ORklHLnNlbGVjdG9ycy5zaW5nbGVQYWdlQ29udGVudCk7XHJcbiAgICAvLyBjb25zdCBpbmRleCA9IGxvY2F0aW9uLmhhc2guc3BsaXQoJyNwcm9kdWN0cy8nKVsxXS50cmltKCk7XHJcbiAgICBjb25zdCBpbmRleCA9IGxvY2F0aW9uLnBhdGhuYW1lLnNwbGl0KCcvcHJvZHVjdHMvJylbMV0udHJpbSgpO1xyXG4gICAgY29uc29sZS5sb2coaW5kZXgpO1xyXG4gICAgbGV0IGlzRmluZCA9IGZhbHNlO1xyXG4gICAgaWYgKHByb2R1Y3RzLmxlbmd0aCkge1xyXG4gICAgICBwcm9kdWN0cy5mb3JFYWNoKChwcm9kdWN0KSA9PiB7XHJcbiAgICAgICAgaWYgKE51bWJlcihwcm9kdWN0LmlkKSA9PT0gTnVtYmVyKGluZGV4KSkge1xyXG4gICAgICAgICAgaXNGaW5kID0gdHJ1ZTtcclxuICAgICAgICAgIGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCdoMycpLmlubmVyVGV4dCA9IHByb2R1Y3QubmFtZTtcclxuICAgICAgICAgIGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCdpbWcnKS5zZXRBdHRyaWJ1dGUoJ3NyYycsICcvJyArIHByb2R1Y3QuaW1hZ2UubGFyZ2UpO1xyXG4gICAgICAgICAgY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJ3AnKS5pbm5lclRleHQgPSBwcm9kdWN0LmRlc2NyaXB0aW9uO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBjb25zb2xlLmxvZyh0aGlzKTtcclxuXHJcbiAgICBpc0ZpbmQgPyBwYWdlLmNsYXNzTGlzdC5hZGQoQ09ORklHLnZpc2libGUpIDogdGhpcy5yZW5kZXI0MDQoKTtcclxuICB9XHJcblxyXG4gIHJlbmRlckVycm9yUGFnZSgpIHtcclxuICAgIGNvbnN0IHBhZ2UgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKENPTkZJRy5zZWxlY3RvcnMuZXJyb3JQYWdlKTtcclxuICAgIHBhZ2UuY2xhc3NMaXN0LmFkZChDT05GSUcudmlzaWJsZSk7XHJcbiAgfVxyXG5cclxuICByZW5kZXJMb2dpblBhZ2UoKSB7XHJcbiAgICBjb25zdCBwYWdlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihDT05GSUcuc2VsZWN0b3JzLmxvZ2luUGFnZSk7XHJcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncmVnaXN0cmF0aW9uJykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLChldmVudCkgPT4ge1xyXG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICBpZiAoZXZlbnQudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnb3BlbicpKSB7XHJcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3JlZ2lzdHJhdGlvbi1hcmVhJykuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgICBldmVudC50YXJnZXQuY2xhc3NMaXN0LnRvZ2dsZSgnb3BlbicpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyZWdpc3RyYXRpb24tYXJlYScpLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xyXG4gICAgICAgIGV2ZW50LnRhcmdldC5jbGFzc0xpc3QudG9nZ2xlKCdvcGVuJyk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgcGFnZS5jbGFzc0xpc3QuYWRkKENPTkZJRy52aXNpYmxlKTtcclxuICB9XHJcblxyXG4gIGZpbHRlclJlc3VsdChwcm9kdWN0cywgZmlsdGVyKSB7XHJcbiAgICBjb25zb2xlLmxvZyhmaWx0ZXIpO1xyXG4gICAgY29uc3Qgb3B0aW9ucyA9IENPTkZJRy5maWx0ZXJPcHRpb25zO1xyXG4gICAgbGV0IHByb2R1Y3RzQ29weSA9IFsuLi5wcm9kdWN0c107XHJcbiAgICBsZXQgcmVzdWx0ID0gW107XHJcbiAgICBsZXQgaXNGaWx0ZXJlZCA9IGZhbHNlO1xyXG4gICAgdGhpcy5jbGVhckNoZWNrYm94KCk7XHJcblxyXG4gICAgb3B0aW9ucy5mb3JFYWNoKChvcHRpb24pID0+IHtcclxuICAgICAgaWYoZmlsdGVyW29wdGlvbl0gJiYgZmlsdGVyW29wdGlvbl0ubGVuZ3RoKSB7XHJcbiAgICAgICAgaWYgKGlzRmlsdGVyZWQpIHtcclxuICAgICAgICAgIHByb2R1Y3RzQ29weSA9IHJlc3VsdDtcclxuICAgICAgICAgIHJlc3VsdCA9IFtdO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zb2xlLmxvZyhvcHRpb24pO1xyXG4gICAgICAgIGZpbHRlcltvcHRpb25dLmZvckVhY2goKGl0ZW0pID0+IHtcclxuICAgICAgICAgIHByb2R1Y3RzQ29weS5mb3JFYWNoKChwcm9kdWN0KSA9PiB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgcHJvZHVjdC5zcGVjc1tvcHRpb25dID09PSAnbnVtYmVyJyAmJlxyXG4gICAgICAgICAgICAgIHByb2R1Y3Quc3BlY3Nbb3B0aW9uXSA9PT0gTnVtYmVyKGl0ZW0pKSB7XHJcbiAgICAgICAgICAgICAgcmVzdWx0LnB1c2gocHJvZHVjdCk7XHJcbiAgICAgICAgICAgICAgaXNGaWx0ZXJlZCA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgcHJvZHVjdC5zcGVjc1tvcHRpb25dID09PSAnc3RyaW5nJyAmJlxyXG4gICAgICAgICAgICAgIHByb2R1Y3Quc3BlY3Nbb3B0aW9uXS50b0xvd2VyQ2FzZSgpLmluZGV4T2YoaXRlbSkgIT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgcmVzdWx0LnB1c2gocHJvZHVjdCk7XHJcbiAgICAgICAgICAgICAgaXNGaWx0ZXJlZCA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBbLi4uZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChgaW5wdXRbbmFtZT0ke29wdGlvbn1dYCldLmZpbHRlcigoY2hlY2tib3gpID0+IHtcclxuICAgICAgICAgICAgICByZXR1cm4gY2hlY2tib3gudmFsdWUgPT09IGl0ZW07XHJcbiAgICAgICAgICAgIH0pWzBdLmNoZWNrZWQgPSB0cnVlO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbiAgfVxyXG5cclxuICByZW5kZXJGaWx0ZXJSZXN1bHQocHJvZHVjdHMsIGZpbHRlcikgIHtcclxuICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuZmlsdGVyUmVzdWx0KHByb2R1Y3RzLCBmaWx0ZXIpO1xyXG4gICAgdGhpcy5yZW5kZXJIb21lUGFnZShyZXN1bHQpO1xyXG4gIH1cclxuXHJcbiAgY2xlYXJDaGVja2JveCgpIHtcclxuICAgIFsuLi5kb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKENPTkZJRy5zZWxlY3RvcnMuY2hlY2tib3gpXS5mb3JFYWNoKChjaGVja2JveCkgPT4ge1xyXG4gICAgICBjaGVja2JveC5jaGVja2VkID0gZmFsc2U7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGluaXRSZXNldENoZWNrYm94KCkge1xyXG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmZpbHRlcnMgYnV0dG9uJylcclxuICAgICAgLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGV2ZW50KSA9PiB7XHJcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICB0aGlzLmNsZWFyQ2hlY2tib3goKTtcclxuICAgICAgfSk7XHJcbiAgfVxyXG59IiwiaW1wb3J0IHsgQ09ORklHIH0gZnJvbSBcIi4vY29uZmlnXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgUm91dGVyIHtcclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHRoaXMucm91dGVzID0ge1xyXG4gICAgICAnNDA0JzogKCkgPT4ge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdOb3QgZm91bmQnKTtcclxuICAgICAgfSxcclxuICAgIH07XHJcbiAgICB0aGlzLm1haW5Db250ZW50UGFnZXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKENPTkZJRy5zZWxlY3RvcnMubWFpbkNvbnRlbnRQYWdlcyk7XHJcbiAgICBjb25zb2xlLmxvZygnY29uc3RydWN0b3InLCB0aGlzLm1haW5Db250ZW50UGFnZXMpO1xyXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2hhc2hjaGFuZ2UnLCAoKSA9PiB7XHJcbiAgICAgIGNvbnNvbGUubG9nKHdpbmRvdy5sb2NhdGlvbi5oYXNoKTtcclxuICAgICAgdGhpcy5yZW5kZXIoZGVjb2RlVVJJKHdpbmRvdy5sb2NhdGlvbi5oYXNoKSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGFkZFJvdXRlKHJvdXRlLCBhY3Rpb24pIHtcclxuICAgIHRoaXMucm91dGVzW3JvdXRlXSA9IGFjdGlvbjtcclxuICB9XHJcblxyXG4gIHJlbmRlcih1cmwpIHtcclxuICAgIGxldCB0ZW1wID0gdXJsLnNwbGl0KCcvJylbMF07XHJcbiAgICBbLi4udGhpcy5tYWluQ29udGVudFBhZ2VzXS5mb3JFYWNoKChwYWdlKSA9PiB7XHJcbiAgICAgIHBhZ2UuY2xhc3NMaXN0LnJlbW92ZShDT05GSUcudmlzaWJsZSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICB0aGlzLnJvdXRlc1t0ZW1wXSA/IHRoaXMucm91dGVzW3RlbXBdKCkgOiB0aGlzLnJvdXRlc1snNDA0J10oKTtcclxuICB9XHJcblxyXG59IiwiaW1wb3J0IHsgQ09ORklHIH0gZnJvbSBcIi4vY29uZmlnXCI7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tIFwiLi9vYnNlcnZhYmxlXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgQ2hlY2tib3hTZXJ2aWNlIHtcclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHRoaXMuX2NoZWNrYm94ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChDT05GSUcuc2VsZWN0b3JzLmNoZWNrYm94KTtcclxuICAgIHRoaXMuX29ic2VydmFibGUgPSBuZXcgT2JzZXJ2YWJsZSgpO1xyXG4gICAgdGhpcy5maWx0ZXJzID0ge307XHJcbiAgICB0aGlzLmluaXRpYWxTdGF0ZSgpO1xyXG4gICAgdGhpcy5pbml0KCk7XHJcbiAgfVxyXG5cclxuICBzdWJzY3JpYmUoZm4pIHtcclxuICAgIHRoaXMuX29ic2VydmFibGUuc3Vic2NyaWJlKGZuKTtcclxuICB9XHJcblxyXG4gIGluaXQoKSB7XHJcbiAgICAvLyBjb25zdCBzZWxmID0gdGhpcztcclxuICAgIHRoaXMuX2NoZWNrYm94LmZvckVhY2goKGl0ZW0pID0+IHtcclxuICAgICAgaXRlbS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMub25DaGVja2JveENsaWNrLmJpbmQodGhpcykpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmZpbHRlcnMgYnV0dG9uJylcclxuICAgICAgLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGV2ZW50KSA9PiB7XHJcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICB0aGlzLmZpbHRlcnMgPSB7fTtcclxuICAgICAgICB0aGlzLl9vYnNlcnZhYmxlLm5leHQoJy8nKTtcclxuICAgICAgfSk7XHJcbiAgfVxyXG5cclxuICBvbkNoZWNrYm94Q2xpY2soZXZlbnQpIHtcclxuICAgIGNvbnN0IHRhcmdldCA9IGV2ZW50LnRhcmdldDtcclxuICAgIGNvbnN0IHNwZWNOYW1lID0gdGFyZ2V0LmdldEF0dHJpYnV0ZSgnbmFtZScpO1xyXG5cclxuICAgIGlmICh0YXJnZXQuY2hlY2tlZCkge1xyXG4gICAgICBpZighKHRoaXMuZmlsdGVyc1tzcGVjTmFtZV0gJiYgdGhpcy5maWx0ZXJzW3NwZWNOYW1lXS5sZW5ndGgpKSB7XHJcbiAgICAgICAgdGhpcy5maWx0ZXJzW3NwZWNOYW1lXSA9IFtdO1xyXG4gICAgICB9XHJcbiAgICAgIHRoaXMuZmlsdGVyc1tzcGVjTmFtZV0ucHVzaCh0YXJnZXQudmFsdWUpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgaWYgKHRoaXMuZmlsdGVyc1tzcGVjTmFtZV0gJiYgdGhpcy5maWx0ZXJzW3NwZWNOYW1lXS5sZW5ndGggJiZcclxuICAgICAgICB0aGlzLmZpbHRlcnNbc3BlY05hbWVdLmluY2x1ZGVzKHRhcmdldC52YWx1ZSkpIHtcclxuICAgICAgICBsZXQgaW5kZXggPSB0aGlzLmZpbHRlcnNbc3BlY05hbWVdLmluZGV4T2YodGFyZ2V0LnZhbHVlKTtcclxuICAgICAgICB0aGlzLmZpbHRlcnNbc3BlY05hbWVdLnNwbGljZShpbmRleCwgMSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmICghdGhpcy5maWx0ZXJzW3NwZWNOYW1lXS5sZW5ndGgpIHtcclxuICAgICAgICBkZWxldGUgdGhpcy5maWx0ZXJzW3NwZWNOYW1lXTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuX29ic2VydmFibGUubmV4dCh0aGlzLmNyZWF0ZVF1ZXJ5SGFzaCgpKTtcclxuICB9XHJcblxyXG4gIGluaXRpYWxTdGF0ZSgpIHtcclxuICAgIGlmIChsb2NhdGlvbi5wYXRobmFtZS5pbmNsdWRlcygnZmlsdGVyLycpKSB7XHJcbiAgICAgIGxldCBmaWx0ZXIgPSBsb2NhdGlvbi5wYXRobmFtZS5zcGxpdCgnL2ZpbHRlci8nKVsxXS50cmltKCk7XHJcbiAgICAgIHRyeSB7XHJcbiAgICAgICAgdGhpcy5maWx0ZXJzID0gSlNPTi5wYXJzZShkZWNvZGVVUkkoZmlsdGVyKSk7XHJcbiAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICB0aGlzLmZpbHRlcnMgPSB7fTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgY3JlYXRlUXVlcnlIYXNoKCkge1xyXG4gICAgaWYgKE9iamVjdC5rZXlzKHRoaXMuZmlsdGVycykubGVuZ3RoID4gMCkge1xyXG4gICAgICByZXR1cm4gYC9maWx0ZXIvJHtKU09OLnN0cmluZ2lmeSh0aGlzLmZpbHRlcnMpfWA7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuICcvJztcclxuICB9XHJcblxyXG4gIGdldEN1cnJlbnRTdGF0ZSgpIHtcclxuICAgIHJldHVybiB0aGlzLmNyZWF0ZVF1ZXJ5SGFzaCgpO1xyXG4gIH1cclxuXHJcbn0iLCJleHBvcnQgY2xhc3MgT2JzZXJ2YWJsZSB7XHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICB0aGlzLnN1YnNjcmliZXJzID0gW107XHJcbiAgfVxyXG5cclxuICBzdWJzY3JpYmUoZm4pIHtcclxuICAgIHRoaXMuc3Vic2NyaWJlcnMucHVzaChmbik7XHJcbiAgfVxyXG5cclxuICBuZXh0KGRhdGEpIHtcclxuICAgIHRoaXMuc3Vic2NyaWJlcnMuZm9yRWFjaCgoc2IpID0+IHtcclxuICAgICAgc2IoZGF0YSk7XHJcbiAgICB9KVxyXG4gIH1cclxufSIsImltcG9ydCB7IENPTkZJRyB9IGZyb20gXCIuL2NvbmZpZ1wiO1xyXG5cclxuZXhwb3J0IGNsYXNzIFJvdXRlckhpc3Rvcnkge1xyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgdGhpcy5yb3V0ZXMgPSB7XHJcbiAgICAgICc0MDQnOiAoKSA9PiB7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ05vdCBmb3VuZCcpO1xyXG4gICAgICB9LFxyXG4gICAgfTtcclxuICAgIHRoaXMubWFpbkNvbnRlbnRQYWdlcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoQ09ORklHLnNlbGVjdG9ycy5tYWluQ29udGVudFBhZ2VzKTtcclxuXHJcbiAgICAvLyB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignaGFzaGNoYW5nZScsICgpID0+IHtcclxuICAgIC8vICAgY29uc29sZS5sb2cod2luZG93LmxvY2F0aW9uLmhhc2gpO1xyXG4gICAgLy8gICB0aGlzLnJlbmRlcihkZWNvZGVVUkkod2luZG93LmxvY2F0aW9uLmhhc2gpKTtcclxuICAgIC8vIH0pO1xyXG5cclxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdwb3BzdGF0ZScsICgpID0+IHtcclxuICAgICAgdGhpcy5yZW5kZXIoZGVjb2RlVVJJKHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZSkpO1xyXG4gICAgfSk7XHJcblxyXG4gIH1cclxuXHJcbiAgYWRkUm91dGUocm91dGUsIGFjdGlvbikge1xyXG4gICAgdGhpcy5yb3V0ZXNbcm91dGVdID0gYWN0aW9uO1xyXG4gIH1cclxuXHJcbiAgaXNBdXRoKCkge1xyXG4gICAgcmV0dXJuIHNlc3Npb25TdG9yYWdlLmdldEl0ZW0oJ2xvZ2luJyk7XHJcbiAgfVxyXG5cclxuICByZW5kZXIodXJsKSB7XHJcbiAgICBpZiAodGhpcy5pc0F1dGgoKSkge1xyXG4gICAgICBjb25zb2xlLmxvZyh1cmwpO1xyXG4gICAgICBsZXQgdGVtcCA9IHVybC5zcGxpdCgnLycpWzFdO1xyXG5cclxuICAgICAgWy4uLnRoaXMubWFpbkNvbnRlbnRQYWdlc10uZm9yRWFjaCgocGFnZSkgPT4ge1xyXG4gICAgICAgIHBhZ2UuY2xhc3NMaXN0LnJlbW92ZShDT05GSUcudmlzaWJsZSk7XHJcbiAgICAgIH0pO1xyXG4gICAgICBpZiAodGVtcCA9PT0gJ2xvZ2luJykge1xyXG4gICAgICAgIHRlbXAgPSAnJztcclxuICAgICAgICBoaXN0b3J5LnB1c2hTdGF0ZShudWxsLCBudWxsLCAnLycpO1xyXG4gICAgICB9XHJcbiAgICAgIHRoaXMucm91dGVzW3RlbXBdID8gdGhpcy5yb3V0ZXNbdGVtcF0oKSA6IHRoaXMucm91dGVzWyc0MDQnXSgpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgaGlzdG9yeS5wdXNoU3RhdGUobnVsbCwgbnVsbCwgJy9sb2dpbicpO1xyXG4gICAgICB0aGlzLnJvdXRlc1snbG9naW4nXSgpO1xyXG4gICAgfVxyXG5cclxuICB9XHJcblxyXG59IiwiaW1wb3J0IHsgQ09ORklHIH0gZnJvbSBcIi4vY29uZmlnXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgQXV0aFNlcnZpY2Uge1xyXG4gIGNvbnN0cnVjdG9yKHJvdXRlcikge1xyXG4gICAgdGhpcy5idG4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbG9naW4tYnRuJyk7XHJcbiAgICB0aGlzLmluaXQoKTtcclxuICAgIHRoaXMucm91dGVyID0gcm91dGVyO1xyXG4gIH1cclxuXHJcbiAgaW5pdCgpIHtcclxuICAgIHRoaXMuYnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGV2ZW50KSA9PiB7XHJcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgIHRoaXMuYXV0aCgpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBhdXRoKCkge1xyXG4gICAgY29uc3QgdXNlck5hbWUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbG9naW4tbmFtZScpLnZhbHVlO1xyXG4gICAgY29uc3QgdXNlclBzdyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdsb2dpbi1wc3cnKS52YWx1ZTtcclxuXHJcbiAgICBpZiAodXNlck5hbWUudHJpbSgpICYmIHVzZXJQc3cudHJpbSgpKSB7XHJcbiAgICAgIGZldGNoKGAke0NPTkZJRy5hcGl9L3VzZXJzYClcclxuICAgICAgICAudGhlbigocmVzKSA9PiByZXMuanNvbigpKVxyXG4gICAgICAgIC50aGVuKChyZXMpID0+IHtcclxuICAgICAgICAgIHJlcyA9IHJlcy5maWx0ZXIoKGl0ZW0pID0+IGl0ZW0ubG9naW4gPT09IHVzZXJOYW1lICYmIFN0cmluZyhpdGVtLnBzdykgPT09IHVzZXJQc3cpO1xyXG5cclxuICAgICAgICAgIGlmKHJlcy5sZW5ndGggPT09IDEpIHtcclxuICAgICAgICAgICAgc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbSgnbG9naW4nLCB0cnVlKTtcclxuICAgICAgICAgICAgaGlzdG9yeS5wdXNoU3RhdGUobnVsbCwgbnVsbCwgJy8nKTtcclxuICAgICAgICAgICAgdGhpcy5yb3V0ZXIucmVuZGVyKGRlY29kZVVSSShsb2NhdGlvbi5wYXRobmFtZSkpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iXSwic291cmNlUm9vdCI6IiJ9